/* tslint:disable */
/* eslint-disable */
/*
Transactions API


The transactions API lets you view your transactions, accounts, and statements.


The version of the OpenAPI document: 1.0
Contact: developer-access@brex.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CardAccount } from '../models';
// @ts-ignore
import { CashAccount } from '../models';
// @ts-ignore
import { PageCashAccount } from '../models';
// @ts-ignore
import { PageStatement } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AccountsApi - axios parameter creator
 * @export
 */
export const AccountsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *  This endpoint returns the cash account associated with the provided ID with its status. 
         * @summary  Get cash account by ID 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCashAccount: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCashAccount', 'id', id)
            const localVarPath = `/v2/accounts/cash/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", ["accounts.cash.readonly"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/accounts/cash/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  This endpoint lists all accounts of card type. 
         * @summary  List card accounts 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCardAccounts: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/accounts/card`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", ["accounts.card.readonly"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/accounts/card',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  This endpoint lists all the existing cash accounts with their status. 
         * @summary  List cash accounts 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCashAccounts: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/accounts/cash`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", ["accounts.cash.readonly"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/accounts/cash',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  This endpoint lists all finalized statements for the cash account by ID. 
         * @summary  List cash account statements.     
         * @param {string} id 
         * @param {string} [cursor] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCashStatements: async (id: string, cursor?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listCashStatements', 'id', id)
            const localVarPath = `/v2/accounts/cash/{id}/statements`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/accounts/cash/{id}/statements',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  This endpoint lists all finalized statements for the primary card account. 
         * @summary  List primary card account statements.  
         * @param {string} [cursor] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPrimaryCardStatements: async (cursor?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/accounts/card/primary/statements`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", ["statements.card.readonly"], configuration)
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/accounts/card/primary/statements',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  This endpoint returns the primary cash account with its status. There will always be only one primary account. 
         * @summary  Get primary cash account 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        status: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/accounts/cash/primary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", ["accounts.cash.readonly"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/accounts/cash/primary',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountsApi - functional programming interface
 * @export
 */
export const AccountsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountsApiAxiosParamCreator(configuration)
    return {
        /**
         *  This endpoint returns the cash account associated with the provided ID with its status. 
         * @summary  Get cash account by ID 
         * @param {AccountsApiGetCashAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCashAccount(requestParameters: AccountsApiGetCashAccountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CashAccount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCashAccount(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  This endpoint lists all accounts of card type. 
         * @summary  List card accounts 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCardAccounts(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CardAccount>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCardAccounts(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  This endpoint lists all the existing cash accounts with their status. 
         * @summary  List cash accounts 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCashAccounts(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageCashAccount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCashAccounts(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  This endpoint lists all finalized statements for the cash account by ID. 
         * @summary  List cash account statements.     
         * @param {AccountsApiListCashStatementsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCashStatements(requestParameters: AccountsApiListCashStatementsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageStatement>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCashStatements(requestParameters.id, requestParameters.cursor, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  This endpoint lists all finalized statements for the primary card account. 
         * @summary  List primary card account statements.  
         * @param {AccountsApiListPrimaryCardStatementsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPrimaryCardStatements(requestParameters: AccountsApiListPrimaryCardStatementsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageStatement>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPrimaryCardStatements(requestParameters.cursor, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  This endpoint returns the primary cash account with its status. There will always be only one primary account. 
         * @summary  Get primary cash account 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async status(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CashAccount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.status(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccountsApi - factory interface
 * @export
 */
export const AccountsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountsApiFp(configuration)
    return {
        /**
         *  This endpoint returns the cash account associated with the provided ID with its status. 
         * @summary  Get cash account by ID 
         * @param {AccountsApiGetCashAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCashAccount(requestParameters: AccountsApiGetCashAccountRequest, options?: AxiosRequestConfig): AxiosPromise<CashAccount> {
            return localVarFp.getCashAccount(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         *  This endpoint lists all accounts of card type. 
         * @summary  List card accounts 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCardAccounts(options?: AxiosRequestConfig): AxiosPromise<Array<CardAccount>> {
            return localVarFp.listCardAccounts(options).then((request) => request(axios, basePath));
        },
        /**
         *  This endpoint lists all the existing cash accounts with their status. 
         * @summary  List cash accounts 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCashAccounts(options?: AxiosRequestConfig): AxiosPromise<PageCashAccount> {
            return localVarFp.listCashAccounts(options).then((request) => request(axios, basePath));
        },
        /**
         *  This endpoint lists all finalized statements for the cash account by ID. 
         * @summary  List cash account statements.     
         * @param {AccountsApiListCashStatementsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCashStatements(requestParameters: AccountsApiListCashStatementsRequest, options?: AxiosRequestConfig): AxiosPromise<PageStatement> {
            return localVarFp.listCashStatements(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         *  This endpoint lists all finalized statements for the primary card account. 
         * @summary  List primary card account statements.  
         * @param {AccountsApiListPrimaryCardStatementsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPrimaryCardStatements(requestParameters: AccountsApiListPrimaryCardStatementsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PageStatement> {
            return localVarFp.listPrimaryCardStatements(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         *  This endpoint returns the primary cash account with its status. There will always be only one primary account. 
         * @summary  Get primary cash account 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        status(options?: AxiosRequestConfig): AxiosPromise<CashAccount> {
            return localVarFp.status(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getCashAccount operation in AccountsApi.
 * @export
 * @interface AccountsApiGetCashAccountRequest
 */
export type AccountsApiGetCashAccountRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof AccountsApiGetCashAccount
    */
    readonly id: string
    
}

/**
 * Request parameters for listCashStatements operation in AccountsApi.
 * @export
 * @interface AccountsApiListCashStatementsRequest
 */
export type AccountsApiListCashStatementsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof AccountsApiListCashStatements
    */
    readonly id: string
    
    /**
    * 
    * @type {string}
    * @memberof AccountsApiListCashStatements
    */
    readonly cursor?: string
    
    /**
    * 
    * @type {number}
    * @memberof AccountsApiListCashStatements
    */
    readonly limit?: number
    
}

/**
 * Request parameters for listPrimaryCardStatements operation in AccountsApi.
 * @export
 * @interface AccountsApiListPrimaryCardStatementsRequest
 */
export type AccountsApiListPrimaryCardStatementsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof AccountsApiListPrimaryCardStatements
    */
    readonly cursor?: string
    
    /**
    * 
    * @type {number}
    * @memberof AccountsApiListPrimaryCardStatements
    */
    readonly limit?: number
    
}

/**
 * AccountsApiGenerated - object-oriented interface
 * @export
 * @class AccountsApiGenerated
 * @extends {BaseAPI}
 */
export class AccountsApiGenerated extends BaseAPI {
    /**
     *  This endpoint returns the cash account associated with the provided ID with its status. 
     * @summary  Get cash account by ID 
     * @param {AccountsApiGetCashAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiGenerated
     */
    public getCashAccount(requestParameters: AccountsApiGetCashAccountRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).getCashAccount(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  This endpoint lists all accounts of card type. 
     * @summary  List card accounts 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiGenerated
     */
    public listCardAccounts(options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).listCardAccounts(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  This endpoint lists all the existing cash accounts with their status. 
     * @summary  List cash accounts 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiGenerated
     */
    public listCashAccounts(options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).listCashAccounts(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  This endpoint lists all finalized statements for the cash account by ID. 
     * @summary  List cash account statements.     
     * @param {AccountsApiListCashStatementsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiGenerated
     */
    public listCashStatements(requestParameters: AccountsApiListCashStatementsRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).listCashStatements(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  This endpoint lists all finalized statements for the primary card account. 
     * @summary  List primary card account statements.  
     * @param {AccountsApiListPrimaryCardStatementsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiGenerated
     */
    public listPrimaryCardStatements(requestParameters: AccountsApiListPrimaryCardStatementsRequest = {}, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).listPrimaryCardStatements(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  This endpoint returns the primary cash account with its status. There will always be only one primary account. 
     * @summary  Get primary cash account 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiGenerated
     */
    public status(options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).status(options).then((request) => request(this.axios, this.basePath));
    }
}
